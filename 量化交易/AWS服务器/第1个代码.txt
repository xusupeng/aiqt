import requests
import time
import json
import threading
import logging

# 配置日志记录器
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# 定义交易所 API 端点和密钥
OKEX_API_ENDPOINT = 'https://www.okex.com/api/v1/'
OKEX_API_KEY = 'your_api_key'
OKEX_API_SECRET = 'your_api_secret'

# 定义交易策略函数
def trading_strategy():
    # 获取市场数据
    market_data = requests.get(OKEX_API_ENDPOINT +'market/ticker').json()

    # 解析市场数据
    symbol = market_data['symbol']
    price = float(market_data['last'])

    # 定义交易信号
    if price > 1000:
        logging.info(f'买入信号: {symbol} 价格: {price}')
        # 发送买入订单
        place_order(symbol, 'buy', price, 1)

    elif price < 1000:
        logging.info(f'卖出信号: {symbol} 价格: {price}')
        # 发送卖出订单
        place_order(symbol, 'ell', price, 1)

# 定义下单函数
def place_order(symbol, side, price, quantity):
    # 构建下单请求
    params = {
        'api_key': OKEX_API_KEY,
        'ymbol': symbol,
        'ide': side,
        'price': price,
        'quantity': quantity
    }

    # 发送下单请求
    response = requests.post(OKEX_API_ENDPOINT +'order/place', data=json.dumps(params)).json()

    # 解析下单响应
    if response['result']:
        logging.info(f'订单成功: {symbol} {side} {price} {quantity}')
    else:
        logging.error(f'订单失败: {symbol} {side} {price} {quantity}')

# 定义主函数
def main():
    # 启动交易策略线程
    strategy_thread = threading.Thread(target=trading_strategy)
    strategy_thread.start()

    # 保持程序运行
    while True:
        time.sleep(60)

# 运行主函数
if __name__ == '__main__':
    main()